<?xml version="1.0" encoding="UTF-8"?><schema xmlns="http://purl.oclc.org/dsdl/schematron" xmlns:sch="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2">
  <title>Schematron constraints for schema 'AppSchema'</title>
  <ns prefix="sch" uri="http://purl.oclc.org/dsdl/schematron"/>
  <ns prefix="core" uri="http://shapechange.net/test/sbvr2schematron"/>
  <ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>
  <ns prefix="a" uri="http://shapechange.net/test/sbvr2schematron/extA"/>
  <ns prefix="xlink" uri="http://www.w3.org/1999/xlink"/>
  <ns prefix="gml" uri="http://www.opengis.net/gml/3.2"/>
  <ns prefix="b" uri="http://shapechange.net/test/sbvr2schematron/extB"/>
  <ns prefix="d" uri="http://shapechange.net/test/sbvr2schematron/extD"/>
  <pattern>
    <rule context="core:Class1_1">
      <assert id="R0" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if (not($x2 = 'TEST')) then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have p1 other than 'TEST'.</assert>
      <assert id="R15-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have pDatatype equal-to 'TEST'.</assert>
      <assert id="R16-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype/@uom return if ($x2 = 'XYZ') then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have pDatatype.uom equal-to 'XYZ'.</assert>
      <assert id="R18-Valid" test="every $x1 in current()/core:timeSlice satisfies (for $c1 in count(for $x2 in $x1/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1.timeSlice shall have p1 equal-to 'TEST'.</assert>
      <assert id="R23-Valid" test="every $x1 in current()/core:timeSlice/*/core:p1 satisfies ((not($x1[@xsi:nil='true']) and not($x1 = 'TEST')))">Each Class1_1.p1 shall have assigned value other than 'TEST'.</assert>
      <assert id="R26-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) or (for $c2 in count(for $x3 in $x1/core:timeSlice/*/core:pDatatype/@uom return if (not(not(string-length(normalize-space($x3))))) then 1 else ()) return ($c2 &gt;= 1))))">Each Class1_1 with assigned pDatatype shall have assigned pDatatype.uom.</assert>
      <assert id="R27-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) or (for $c3 in count(for $x3 in $x1/core:timeSlice/*/core:pDatatype return if (for $c2 in count(for $x4 in $x3/@uom return if (not(not(string-length(normalize-space($x4))))) then 1 else ()) return ($c2 &gt;= 1)) then 1 else ()) return ($c3 &gt;= 1))))">Each Class1_1 with assigned pDatatype shall have pDatatype with assigned uom value.</assert>
      <assert id="R30-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)) or ((for $c2 in count(for $x3 in $x1/core:timeSlice/*/core:extension/*/a:p2Exta return if ($x3 = 'T2') then 1 else ()) return ($c2 &gt;= 1)) and (for $c3 in count(for $x4 in $x1/core:timeSlice/*/core:extension/*/a:pExtAGeneric return if ($x4 = 'FALSE') then 1 else ()) return ($c3 &gt;= 1)))))">Each Class1_1 with p1 equal-to 'TEST' shall have p2Exta equal-to 'T2' and shall have pExtAGeneric equal-to 'FALSE'.</assert>
      <assert id="R31-Valid" test="every $x1 in current() satisfies (not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)))">It is prohibited that a Class1_1 has p1 equal-to 'TEST'.</assert>
      <assert id="R32-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)) or not(for $c2 in count(for $x3 in $x1/core:timeSlice/*/core:extension/*/a:p2Exta return if ($x3 = 'TEST') then 1 else ()) return ($c2 &gt;= 1))))">It is prohibited that a Class1_1 with p1 equal-to 'TEST' has p2Exta equal-to 'TEST'.</assert>
      <assert id="R6-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:extension/*/a:p2Exta return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have assigned p2Exta value.</assert>
      <assert id="R7-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:extension/*/a:pExtAGeneric return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) or (for $c2 in count(for $x3 in //*[concat('#',@gml:id)=$x1/core:timeSlice/*/core:extension/*/a:p3Exta/@xlink:href]/a:timeSlice/*/a:p1 return if ($x3 &gt; 0.0) then 1 else ()) return ($c2 &gt;= 1))))">Each Class1_1 with assigned pExtAGeneric value shall have p3Exta.p1 higher-than 0.</assert>
      <assert id="R8-Valid" test="for $c2 in count(for $x1 in current()/core:timeSlice return if (for $c1 in count(for $x2 in $x1/*/core:interpretation return if ($x2 = 'BASELINE') then 1 else ()) return ($c1 &gt;= 1)) then 1 else ()) return ($c2 &gt;= 1)">At least one Class1_1.timeSlice shall have interpretation equal-to 'BASELINE'</assert>
    </rule>
    <rule context="core:Class1_1A">
      <assert id="R0" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if (not($x2 = 'TEST')) then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have p1 other than 'TEST'.</assert>
      <assert id="R15-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have pDatatype equal-to 'TEST'.</assert>
      <assert id="R16-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype/@uom return if ($x2 = 'XYZ') then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have pDatatype.uom equal-to 'XYZ'.</assert>
      <assert id="R18-Valid" test="every $x1 in current()/core:timeSlice satisfies (for $c1 in count(for $x2 in $x1/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1.timeSlice shall have p1 equal-to 'TEST'.</assert>
      <assert id="R23-Valid" test="every $x1 in current()/core:timeSlice/*/core:p1 satisfies ((not($x1[@xsi:nil='true']) and not($x1 = 'TEST')))">Each Class1_1.p1 shall have assigned value other than 'TEST'.</assert>
      <assert id="R26-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) or (for $c2 in count(for $x3 in $x1/core:timeSlice/*/core:pDatatype/@uom return if (not(not(string-length(normalize-space($x3))))) then 1 else ()) return ($c2 &gt;= 1))))">Each Class1_1 with assigned pDatatype shall have assigned pDatatype.uom.</assert>
      <assert id="R27-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) or (for $c3 in count(for $x3 in $x1/core:timeSlice/*/core:pDatatype return if (for $c2 in count(for $x4 in $x3/@uom return if (not(not(string-length(normalize-space($x4))))) then 1 else ()) return ($c2 &gt;= 1)) then 1 else ()) return ($c3 &gt;= 1))))">Each Class1_1 with assigned pDatatype shall have pDatatype with assigned uom value.</assert>
      <assert id="R30-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)) or ((for $c2 in count(for $x3 in $x1/core:timeSlice/*/core:extension/*/a:p2Exta return if ($x3 = 'T2') then 1 else ()) return ($c2 &gt;= 1)) and (for $c3 in count(for $x4 in $x1/core:timeSlice/*/core:extension/*/a:pExtAGeneric return if ($x4 = 'FALSE') then 1 else ()) return ($c3 &gt;= 1)))))">Each Class1_1 with p1 equal-to 'TEST' shall have p2Exta equal-to 'T2' and shall have pExtAGeneric equal-to 'FALSE'.</assert>
      <assert id="R31-Valid" test="every $x1 in current() satisfies (not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)))">It is prohibited that a Class1_1 has p1 equal-to 'TEST'.</assert>
      <assert id="R32-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)) or not(for $c2 in count(for $x3 in $x1/core:timeSlice/*/core:extension/*/a:p2Exta return if ($x3 = 'TEST') then 1 else ()) return ($c2 &gt;= 1))))">It is prohibited that a Class1_1 with p1 equal-to 'TEST' has p2Exta equal-to 'TEST'.</assert>
      <assert id="R6-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:extension/*/a:p2Exta return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have assigned p2Exta value.</assert>
      <assert id="R7-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:extension/*/a:pExtAGeneric return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) or (for $c2 in count(for $x3 in //*[concat('#',@gml:id)=$x1/core:timeSlice/*/core:extension/*/a:p3Exta/@xlink:href]/a:timeSlice/*/a:p1 return if ($x3 &gt; 0.0) then 1 else ()) return ($c2 &gt;= 1))))">Each Class1_1 with assigned pExtAGeneric value shall have p3Exta.p1 higher-than 0.</assert>
      <assert id="R8-Valid" test="for $c2 in count(for $x1 in current()/core:timeSlice return if (for $c1 in count(for $x2 in $x1/*/core:interpretation return if ($x2 = 'BASELINE') then 1 else ()) return ($c1 &gt;= 1)) then 1 else ()) return ($c2 &gt;= 1)">At least one Class1_1.timeSlice shall have interpretation equal-to 'BASELINE'</assert>
    </rule>
    <rule context="core:Class1_1B">
      <assert id="R0" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if (not($x2 = 'TEST')) then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have p1 other than 'TEST'.</assert>
      <assert id="R15-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have pDatatype equal-to 'TEST'.</assert>
      <assert id="R16-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype/@uom return if ($x2 = 'XYZ') then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have pDatatype.uom equal-to 'XYZ'.</assert>
      <assert id="R18-Valid" test="every $x1 in current()/core:timeSlice satisfies (for $c1 in count(for $x2 in $x1/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1.timeSlice shall have p1 equal-to 'TEST'.</assert>
      <assert id="R23-Valid" test="every $x1 in current()/core:timeSlice/*/core:p1 satisfies ((not($x1[@xsi:nil='true']) and not($x1 = 'TEST')))">Each Class1_1.p1 shall have assigned value other than 'TEST'.</assert>
      <assert id="R26-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) or (for $c2 in count(for $x3 in $x1/core:timeSlice/*/core:pDatatype/@uom return if (not(not(string-length(normalize-space($x3))))) then 1 else ()) return ($c2 &gt;= 1))))">Each Class1_1 with assigned pDatatype shall have assigned pDatatype.uom.</assert>
      <assert id="R27-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:pDatatype return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) or (for $c3 in count(for $x3 in $x1/core:timeSlice/*/core:pDatatype return if (for $c2 in count(for $x4 in $x3/@uom return if (not(not(string-length(normalize-space($x4))))) then 1 else ()) return ($c2 &gt;= 1)) then 1 else ()) return ($c3 &gt;= 1))))">Each Class1_1 with assigned pDatatype shall have pDatatype with assigned uom value.</assert>
      <assert id="R30-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)) or ((for $c2 in count(for $x3 in $x1/core:timeSlice/*/core:extension/*/a:p2Exta return if ($x3 = 'T2') then 1 else ()) return ($c2 &gt;= 1)) and (for $c3 in count(for $x4 in $x1/core:timeSlice/*/core:extension/*/a:pExtAGeneric return if ($x4 = 'FALSE') then 1 else ()) return ($c3 &gt;= 1)))))">Each Class1_1 with p1 equal-to 'TEST' shall have p2Exta equal-to 'T2' and shall have pExtAGeneric equal-to 'FALSE'.</assert>
      <assert id="R31-Valid" test="every $x1 in current() satisfies (not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)))">It is prohibited that a Class1_1 has p1 equal-to 'TEST'.</assert>
      <assert id="R32-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)) or not(for $c2 in count(for $x3 in $x1/core:timeSlice/*/core:extension/*/a:p2Exta return if ($x3 = 'TEST') then 1 else ()) return ($c2 &gt;= 1))))">It is prohibited that a Class1_1 with p1 equal-to 'TEST' has p2Exta equal-to 'TEST'.</assert>
      <assert id="R6-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:extension/*/a:p2Exta return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1))">Each Class1_1 shall have assigned p2Exta value.</assert>
      <assert id="R7-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:extension/*/a:pExtAGeneric return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) or (for $c2 in count(for $x3 in //*[concat('#',@gml:id)=$x1/core:timeSlice/*/core:extension/*/a:p3Exta/@xlink:href]/a:timeSlice/*/a:p1 return if ($x3 &gt; 0.0) then 1 else ()) return ($c2 &gt;= 1))))">Each Class1_1 with assigned pExtAGeneric value shall have p3Exta.p1 higher-than 0.</assert>
      <assert id="R8-Valid" test="for $c2 in count(for $x1 in current()/core:timeSlice return if (for $c1 in count(for $x2 in $x1/*/core:interpretation return if ($x2 = 'BASELINE') then 1 else ()) return ($c1 &gt;= 1)) then 1 else ()) return ($c2 &gt;= 1)">At least one Class1_1.timeSlice shall have interpretation equal-to 'BASELINE'</assert>
    </rule>
    <rule context="core:Class1_3">
      <assert id="R28-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:class1_1 return if ((//*[concat('#',@gml:id)=$x2/@xlink:href][name()='core:Class1_1A'] or //*[concat('#',@gml:id)=$x2/@xlink:href][name()='core:Class1_1B'])) then 1 else ()) return ($c1 &gt;= 1))">Each Class1_3 shall have class1_1 of-type 'Class1_1A' or 'Class1_1B'.</assert>
      <assert id="R29-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:class1_1 return if (//*[concat('#',@gml:id)=$x2/@xlink:href][name()='core:Class1_1' or name()='core:Class1_1A' or name()='core:Class1_1B']) then 1 else ()) return ($c1 &gt;= 1))">Each Class1_3 shall have class1_1 of-type 'Class1_1'.</assert>
    </rule>
    <rule context="core:Class2_1">
      <assert id="R1-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) or (for $c3 in count(for $x3 in $x1/core:timeSlice/*/core:class2_2 return if (for $c2 in count(for $x4 in $x3/*/core:p1 return if ($x4 = 'TEST') then 1 else ()) return ($c2 &gt;= 1)) then 1 else ()) return ($c3 &gt;= 1))))">It is obligatory that a Class2_1 with assigned p1 value hasClass2_2 Class2_2 with p1 equal to 'TEST'.</assert>
      <assert id="R2-Valid" test="every $x1 in current() satisfies (for $c2 in count(for $x2 in $x1/core:timeSlice/*/core:class2_2 return if (for $c1 in count(for $x3 in $x2/*/core:p1 return if ($x3 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)) then 1 else ()) return ($c2 = 1))">It is obligatory that a Class2_1 has exactly one class2_2 with p1 equal to 'TEST'.</assert>
      <assert id="R21-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:class2_2/*/core:extension/*/b:p4ExtB/*/b:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1))">Each Class2_1 shall have class2_2.Class2_2.p4ExtB.ClassExtB_1.p1 equal-to 'TEST'.</assert>
      <assert id="R24-Valid" test="every $x1 in current() satisfies ((not(for $c2 in count(for $x2 in $x1/core:timeSlice/*/core:class2_2 return if (for $c1 in count(for $x3 in $x2/*/core:p1 return if ($x3 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)) then 1 else ()) return ($c2 &gt;= 1)) or (for $c3 in count(for $x4 in $x1/core:timeSlice/*/core:p1 return if ($x4 &gt; 1.0) then 1 else ()) return ($c3 &gt;= 1))))">Each Class2_1 that hasClass2_2 Class2_2 with p1 equal-to 'TEST' shall have p1 higher than 1.</assert>
      <assert id="R25-Valid" test="every $x1 in current() satisfies ((not(for $c3 in count(for $x2 in $x1/core:timeSlice/*/core:class2_2 return if (for $c2 in count(for $x3 in $x2/*/core:extension/*/b:p4ExtB return if (for $c1 in count(for $x4 in $x3/*/b:p1 return if (not($x4[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) then 1 else ()) return ($c2 &gt;= 1)) then 1 else ()) return ($c3 &gt;= 1)) or (for $c4 in count(for $x5 in $x1/core:timeSlice/*/core:p1 return if ($x5 &gt; 1.0) then 1 else ()) return ($c4 &gt;= 1))))">Each Class2_1 that hasClass2_2 Class2_2 that has p4ExtB that has assigned p1 value shall have p1 higher than 1.</assert>
      <assert id="R3-Valid" test="every $x1 in current() satisfies (((for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:p1 return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) and (for $c2 in count(for $x3 in $x1/core:timeSlice/*/core:class2_2 return if (not($x3[@xsi:nil='true'])) then 1 else ()) return ($c2 &lt;= 4))))">Each Class2_1 shall have assigned p1 value and shall have at most 4 class2_2</assert>
      <assert id="R4-Valid" test="every $x1 in current()/core:timeSlice/*/core:class2_2 satisfies (for $c1 in count(for $x2 in $x1/*/core:p1 return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1))">Each Class2_1.class2_2 shall have assigned p1 value.</assert>
    </rule>
    <rule context="core:Class2_2">
      <assert id="R17-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in //*[concat('#',@gml:id)=$x1/core:extension/*/b:p4ExtB/*/b:p2/@xlink:href]/core:timeSlice/*/core:p1 return if ($x2 &gt; 3.0) then 1 else ()) return ($c1 &gt;= 1))">Each Class2_2 shall have p4ExtB.p2.p1 higher-than 3.</assert>
      <assert id="R5-Valid" test="every $x1 in current() satisfies ((not(((for $c1 in count(for $x2 in $x1/core:p1 return if (not($x2 = 'test1')) then 1 else ()) return ($c1 &gt;= 1)) and (for $c2 in count(for $x3 in $x1/core:p1 return if (not($x3 = 'test2')) then 1 else ()) return ($c2 &gt;= 1)) and (for $c3 in count(for $x4 in $x1/core:p1 return if (not($x4 = 'test3')) then 1 else ()) return ($c3 &gt;= 1)))) or (for $c4 in count(for $x5 in $x1/core:p2 return if (not($x5[@xsi:nil='true'])) then 1 else ()) return ($c4 &gt;= 1))))">Each Class2_2 with p1 not equal to 'test1' and with p1 not equal to 'test2' and with p1 not equal to 'test3' shall have assigned p2 value.</assert>
    </rule>
    <rule context="core:Class3_1">
      <assert id="R11-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:extension/*/d:p3 return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 5))">Each Class3_1 shall have at least 5 assigned p3 value.</assert>
      <assert id="R12-Valid" test="every $x1 in current() satisfies (for $c3 in count(for $x2 in $x1/core:timeSlice/*/core:p2 return if (((for $c1 in count(for $x3 in //*[concat('#',@gml:id)=$x2/@xlink:href]/core:timeSlice/*/core:p1 return if ($x3 = 'TRUE') then 1 else ()) return ($c1 &gt;= 1)) and (for $c2 in count(for $x4 in //*[concat('#',@gml:id)=//*[concat('#',@gml:id)=$x2/@xlink:href]/core:timeSlice/*/core:p2/@xlink:href]/core:timeSlice/*/core:p1 return if ($x4 = 'FALSE') then 1 else ()) return ($c2 &gt;= 1)))) then 1 else ()) return ($c3 &gt;= 1))">Each Class3_1 shall have p2 with p1 equal-to 'TRUE' and with p2.p1 equal-to 'FALSE'.</assert>
      <assert id="R13-Valid" test="every $x1 in //*[concat('#',@gml:id)=current()/core:timeSlice/*/core:p2/@xlink:href]/core:timeSlice/*/core:p2 satisfies (for $c1 in count(for $x2 in //*[concat('#',@gml:id)=$x1/@xlink:href]/core:timeSlice/*/core:p1 return if ($x2 = 'TRUE') then 1 else ()) return ($c1 &gt;= 1))">Each Class3_1.p2.p2 shall have p1 equal-to 'TRUE'</assert>
      <assert id="R14-Valid" test="every $x1 in current() satisfies (not(((for $c3 in count(for $x2 in $x1/core:timeSlice/*/core:p2 return if (((for $c1 in count(for $x3 in //*[concat('#',@gml:id)=$x2/@xlink:href]/core:timeSlice/*/core:p1 return if ($x3 = 'FALSE') then 1 else ()) return ($c1 &gt;= 1)) and (for $c2 in count(for $x4 in //*[concat('#',@gml:id)=$x2/@xlink:href]/core:timeSlice/*/core:p2 return if (not($x4[@xsi:nil='true'])) then 1 else ()) return ($c2 &gt;= 1)))) then 1 else ()) return ($c3 &gt;= 1)) and (for $c4 in count(for $x5 in //*[concat('#',@gml:id)=$x1/core:timeSlice/*/core:extension/*/d:p3/@xlink:href]/d:timeSlice/*/d:p1 return if ($x5 = 'TEST') then 1 else ()) return ($c4 &gt;= 1)))))">It is prohibited that a Class3_1 hasClass3_2 Class3_2 with p1 equal-to 'FALSE' and with assigned p2 value and has p3.p1 equal-to 'TEST'.</assert>
      <assert id="R20-Valid" test="every $x1 in current()/core:timeSlice satisfies ((not(for $c1 in count(for $x2 in $x1/*/core:interpretation return if ($x2 = 'BASELINE') then 1 else ()) return ($c1 &gt;= 1)) or (for $c2 in count(for $x3 in //*[concat('#',@gml:id)=$x1/*/core:extension/*/d:p3/@xlink:href]/d:timeSlice/*/d:p1 return if ($x3 = 'TEST') then 1 else ()) return ($c2 &gt;= 1))))">Each Class3_1.timeSlice with interpretation equal-to 'BASELINE' shall have at least one p3.timeSlice.p1 equal-to 'TEST'.</assert>
      <assert id="R22-Valid" test="every $x1 in current() satisfies ((not(for $c1 in count(for $x2 in $x1/core:timeSlice/*/core:extension/*/d:p3 return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1)) or (for $c2 in count(for $x3 in $x1/core:timeSlice/*/core:p2 return if (not($x3[@xsi:nil='true'])) then 1 else ()) return ($c2 = 1))))">It is obligatory that each Class3_1 with assigned p3 value hasClass3_2 exactly one Class3_2.</assert>
      <assert id="R9-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in //*[concat('#',@gml:id)=$x1/core:timeSlice/*/core:extension/*/d:p3/@xlink:href]/d:timeSlice/*/d:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1))">Each Class3_1 shall have p3.p1 equal-to 'TEST'</assert>
    </rule>
    <rule context="a:ClassExtA_1">
      <assert id="R10-Valid" test="every $x1 in current() satisfies (for $c1 in count(for $x2 in $x1/a:timeSlice/*/a:p1 return if (not($x2[@xsi:nil='true'])) then 1 else ()) return ($c1 &gt;= 1))">Each ClassExtA_1 shall have assigned p1 value.</assert>
    </rule>
    <rule context="d:ClassExtD_1">
      <assert id="R19-Valid" test="for $c2 in count(for $x1 in current()/d:timeSlice return if (for $c1 in count(for $x2 in $x1/*/d:p1 return if ($x2 = 'TEST') then 1 else ()) return ($c1 &gt;= 1)) then 1 else ()) return ($c2 &gt;= 1)">At least one ClassExtD_1.timeSlice shall have p1 equal-to 'TEST'.</assert>
    </rule>
  </pattern>
</schema>
