<?xml version="1.0" encoding="UTF-8"?>
<schema targetNamespace="http://shapechange.net/model" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:sc="http://shapechange.net/model" xmlns="http://www.w3.org/2001/XMLSchema"
 xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" vc:minVersion="1.1" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0" xmlns:saxon="http://saxon.sf.net/"
 xmlns:xerces="http://xerces.apache.org">
 <defaultOpenContent mode="interleave">
  <annotation>
   <documentation>This schema supports open content. For an element that is defined by this schema and that has complex content, an instance of this element may contain further elements that are not explicitly defined as content of the element - even if the additional elements have the same namespace as the target namespace of this schema - except for global elements declared by this schema. NOTE: Deprecated elements that have been removed from the SCXML schema will thus be allowed in instance data.</documentation>
  </annotation>
  <any notQName="##definedSibling ##defined" namespace="##any" processContents="lax"/>
 </defaultOpenContent>
 <element name="Model" type="sc:ModelType">
  <annotation>
   <documentation>Representation of a UML model</documentation>
  </annotation>
  <key name="packageKey">
   <annotation>
    <documentation>All Package elements shall be identifiable and referencable by their id element.</documentation>
   </annotation>
   <selector xpath=".//sc:Package"/>
   <field xpath="sc:id"/>
  </key>
  <key name="classKey">
   <annotation>
    <documentation>All Class elements shall be identifiable and referencable by their id element.</documentation>
   </annotation>
   <selector xpath=".//sc:Class"/>
   <field xpath="sc:id"/>
  </key>
  <key name="propertyKey">
   <annotation>
    <documentation>All Property elements shall be identifiable and referencable by their id element.</documentation>
   </annotation>
   <selector xpath=".//sc:Property"/>
   <field xpath="sc:id"/>
  </key>
  <key name="associationKey">
   <annotation>
    <documentation>All Association elements shall be identifiable and referencable by their id element.</documentation>
   </annotation>
   <selector xpath="./sc:associations/sc:Association"/>
   <field xpath="sc:id"/>
  </key>
  <key name="classPropertyKey">
   <annotation>
    <documentation>Defines a set with the ids of all Property elements that belong to Class elements.</documentation>
   </annotation>
   <selector xpath=".//sc:Class/sc:properties/sc:Property"/>
   <field xpath="sc:id"/>
  </key>
  <keyref name="packageSupplierKeyRef" refer="sc:packageKey">
   <annotation>
    <documentation>The value of a SupplierId element must be equal to the value of a Package/id element.</documentation>
   </annotation>
   <selector xpath=".//sc:SupplierId"/>
   <field xpath="."/>
  </keyref>
  <keyref name="classToAssociationKeyRef" refer="sc:associationKey">
   <annotation>
    <documentation>The value of a Class/associationId element must be equal to an Association/id element.</documentation>
   </annotation>
   <selector xpath=".//sc:Class"/>
   <field xpath="sc:associationId"/>
  </keyref>
  <keyref name="classSupertypeKeyRef" refer="sc:classKey">
   <annotation>
    <documentation>The value of a SupertypeId element must be equal to a Class/id element.</documentation>
   </annotation>
   <selector xpath=".//sc:SupertypeId"/>
   <field xpath="."/>
  </keyref>
  <keyref name="classSubtypeKeyRef" refer="sc:classKey">
   <annotation>
    <documentation>The value of a SubtypeId element must be equal to a Class/id element.</documentation>
   </annotation>
   <selector xpath=".//sc:SubtypeId"/>
   <field xpath="."/>
  </keyref>
  <keyref name="propertyTypeKeyref" refer="sc:classKey">
   <annotation>
    <documentation>The value of a Property/typeId element must be equal to a Class/id element.</documentation>
   </annotation>
   <selector xpath=".//sc:Property"/>
   <field xpath="sc:typeId"/>
  </keyref>
  <keyref name="propertyInClassKeyRef" refer="sc:classKey">
   <annotation>
    <documentation>The value of a Property/inClassId element must be equal to a Class/id element.</documentation>
   </annotation>
   <selector xpath=".//sc:Property"/>
   <field xpath="sc:inClassId"/>
  </keyref>
  <keyref name="propertyToAssociationKeyRef" refer="sc:associationKey">
   <annotation>
    <documentation>The value of a Property/associationId element must be equal to an Association/id element.</documentation>
   </annotation>
   <selector xpath=".//sc:Property"/>
   <field xpath="sc:associationId"/>
  </keyref>
  <keyref name="associationToClassKeyRef" refer="sc:classKey">
   <annotation>
    <documentation>The value of an Association/assocClassId element must be equal to a Class/id element.</documentation>
   </annotation>
   <selector xpath="./sc:associations/sc:Association"/>
   <field xpath="sc:assocClassId"/>
  </keyref>
  <keyref name="associationEndKeyRef" refer="sc:classPropertyKey">
   <annotation>
    <documentation>The value of @ref within an Association/end1 or -end2 element must be equal to an id contained in the classPropertyKey key set.</documentation>
   </annotation>
   <selector xpath="./sc:associations/sc:Association/sc:end1 | ./sc:associations/sc:Association/sc:end2"/>
   <field xpath="@ref"/>
  </keyref>
  <unique name="uniqueIds">
   <annotation>
    <documentation>IDs of model elements must be unique.</documentation>
   </annotation>
   <selector xpath=".//sc:id"/>
   <field xpath="."/>
  </unique>
 </element>
 <complexType name="ModelType">
  <all>
   <element minOccurs="0" name="globalProfileInfos">
    <annotation>
     <documentation>Information about profiles. Primarily used by the PMT.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" name="Profile">
       <annotation>
        <documentation>High-level documentation of a named profile. Maintained by the PMT.</documentation>
       </annotation>
       <complexType>
        <all>
         <element name="name" type="string">
          <annotation>
           <documentation>Name of the profile.</documentation>
          </annotation>
         </element>
         <element name="description" type="string" minOccurs="0">
          <annotation>
           <documentation>Description of the profile.</documentation>
          </annotation>
         </element>
        </all>
       </complexType>
      </element>
     </all>
    </complexType>
   </element>
   <element name="packages">
    <annotation>
     <documentation>The top level packages contained in the model.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" ref="sc:Package">
       <annotation>
        <documentation>Representation of a UML package.</documentation>
       </annotation>
      </element>
     </all>
    </complexType>
   </element>
   <element minOccurs="0" name="associations">
    <annotation>
     <documentation>Contains the associations that exist within the model.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" name="Association" type="sc:AssociationType"/>
     </all>
    </complexType>
   </element>
  </all>
  <attribute name="encoding" type="string" use="required">
   <annotation>
    <documentation>Character encoding used within the model.</documentation>
   </annotation>
  </attribute>
  <attribute name="scxmlProducer" type="string">
   <annotation>
    <documentation>Identifies the software that produced the SCXML.</documentation>
   </annotation>
  </attribute>
  <attribute name="scxmlProducerVersion" type="string">
   <annotation>
    <documentation>The version of the software that produced the SCXML.</documentation>
   </annotation>
  </attribute>
 </complexType>
 <!-- <complexType name="InfoType">
  <all>
   <element minOccurs="0" name="name" type="string"/>
   <element name="id" type="string"/>
   <element minOccurs="0" ref="sc:stereotypes"/>
   <element ref="sc:descriptors"/>
   <element minOccurs="0" ref="sc:taggedValues"/>
  </all>
 </complexType>-->
 <complexType name="DescriptorType">
  <all>
   <element minOccurs="1" name="descriptorValues">
    <annotation>
     <documentation>A descriptor has one or more values.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" name="DescriptorValue">
       <annotation>
        <documentation>Textual value of a descriptor. The language of the text can be defined via attribute 'lang'. If that attribute is undefined, the text is assumed to be given in the default language, which is application specific.</documentation>
       </annotation>
       <complexType>
        <simpleContent>
         <extension base="string">
          <attribute name="lang" type="string">
           <annotation>
            <documentation>Language identifier.</documentation>
           </annotation>
          </attribute>
         </extension>
        </simpleContent>
       </complexType>
      </element>
     </all>
    </complexType>
   </element>
  </all>
 </complexType>
 <element name="Profile" type="sc:ProfileType">
  <annotation>
   <documentation>Information about a profile to which a model element belongs.</documentation>
  </annotation>
 </element>
 <complexType name="ProfileType">
  <all>
   <element minOccurs="0" name="versionIdentifier">
    <annotation>
     <documentation>Defines, to which versions of a profile a model element belongs. If omitted, the model element belongs to all versions of the profile. NOTE: Often, it is better to handle versioning of profiles through differently named profiles, rather than using version identifiers.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" name="VersionRange">
       <annotation>
        <documentation>Defines an interval of profile versions.</documentation>
       </annotation>
       <complexType>
        <attribute name="begin" type="string" use="required">
         <annotation>
          <documentation>Start of the version range, indicated by a single version identifier (e.g. 1 or 1.2).</documentation>
         </annotation>
        </attribute>
        <attribute name="end" type="string" use="required">
         <annotation>
          <documentation>End of the version range, indicated by a single version identifier (e.g. 10 or 15.3.2).</documentation>
         </annotation>
        </attribute>
       </complexType>
      </element>
     </all>
    </complexType>
   </element>
   <element minOccurs="0" name="parameter">
    <annotation>
     <documentation>Contains the profile parameters defined for the profile.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" minOccurs="1" name="ProfileParameter">
       <annotation>
        <documentation>Parameter defined for the profile (and the model element for which the profile is defined). Consists of a parameter name and optional value.</documentation>
       </annotation>
       <complexType>
        <attribute name="name" type="string" use="required">
         <annotation>
          <documentation>The name of the profile parameter.</documentation>
         </annotation>
        </attribute>
        <attribute name="value" type="string">
         <annotation>
          <documentation>The value of the profile parameter. NOTE: Some parameters may not have a value.</documentation>
         </annotation>
        </attribute>
       </complexType>
      </element>
     </all>
    </complexType>
   </element>
  </all>
  <attribute name="name" type="string" use="required">
   <annotation>
    <documentation>The name of the profile.</documentation>
   </annotation>
  </attribute>
 </complexType>
 <element name="Package">
  <annotation>
   <documentation>A package contained in the model.</documentation>
  </annotation>
  <complexType>
   <complexContent>
    <extension base="sc:PackageType">
     <attribute default="true" name="editable" type="boolean">
      <annotation>
       <documentation>Field that is used - and set - by the PMT. Defines if the user can edit the contents of the package.</documentation>
      </annotation>
     </attribute>
    </extension>
   </complexContent>
  </complexType>
 </element>
 <complexType name="PackageType">
  <all>
   <element minOccurs="1" name="name" type="string">
    <annotation>
     <documentation>The name of the package.</documentation>
    </annotation>
   </element>
   <element name="id" type="string" nillable="false">
    <annotation>
     <documentation>The model internal ID of the package. Shall be unique amongst the IDs of all packages contained in the model.</documentation>
    </annotation>
   </element>
   <element minOccurs="0" ref="sc:stereotypes">
    <annotation>
     <documentation>The stereotypes of the model element.</documentation>
    </annotation>
   </element>
   <element ref="sc:descriptors" minOccurs="0">
    <annotation>
     <documentation>The descriptors of the model element.</documentation>
    </annotation>
   </element>
   <element minOccurs="0" ref="sc:taggedValues"/>
   <element minOccurs="0" name="supplierIds">
    <annotation>
     <documentation>Set of ids of the packages on which the package depends.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" name="SupplierId" type="string">
       <annotation>
        <documentation>Id of a package on which the package depends.</documentation>
       </annotation>
      </element>
     </all>
    </complexType>
   </element>
   <element minOccurs="0" name="diagrams">
    <annotation>
     <documentation>Information about the UML diagrams assigned to the package.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" ref="sc:ImageMetadata"/>
     </all>
    </complexType>
   </element>
   <element maxOccurs="1" minOccurs="0" name="classes">
    <annotation>
     <documentation>The classes that are directly contained in the package.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" ref="sc:Class"/>
     </all>
    </complexType>
   </element>
   <element minOccurs="0" name="packages">
    <annotation>
     <documentation>The directly contained (child) packages.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" ref="sc:Package"/>
     </all>
    </complexType>
   </element>
  </all>
 </complexType>
 <element name="Class" type="sc:ClassType">
  <annotation>
   <documentation>A class contained in the model.</documentation>
  </annotation>
  <unique name="classPropertyStructuredNumber">
   <annotation>
    <documentation>The properties of a class shall be unique with respect to their sequence numbers.</documentation>
   </annotation>
   <selector xpath="./sc:properties/sc:Property"/>
   <field xpath="./sc:sequenceNumber"/>
  </unique>
 </element>
 <complexType name="ClassType">
  <all>
   <element minOccurs="1" name="name" type="string">
    <annotation>
     <documentation>The name of the class.</documentation>
    </annotation>
   </element>
   <element name="id" type="string">
    <annotation>
     <documentation>The model internal ID of the class. Shall be unique amongst the IDs of all classes contained in the model.</documentation>
    </annotation>
   </element>
   <element minOccurs="0" ref="sc:stereotypes"/>
   <element ref="sc:descriptors" minOccurs="0"/>
   <element minOccurs="0" ref="sc:taggedValues"/>
   <element minOccurs="0" name="profiles">
    <annotation>
     <documentation>The profiles to which the class belongs.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" ref="sc:Profile" minOccurs="1"/>
     </all>
    </complexType>
   </element>
   <element default="false" minOccurs="0" name="isAbstract" type="boolean">
    <annotation>
     <documentation>Specifies if the class is abstract.</documentation>
    </annotation>
   </element>
   <element default="false" minOccurs="0" name="isLeaf" type="boolean">
    <annotation>
     <documentation>Specifies if the class is a leaf node (and therefore is not a parent for any other model elements).</documentation>
    </annotation>
   </element>
   <element minOccurs="0" name="associationId" type="string">
    <annotation>
     <documentation>The ID of the association, if the class is an association class.</documentation>
    </annotation>
   </element>
   <element minOccurs="0" name="linkedDocument" type="string">
    <annotation>
     <documentation>Path to a docx document that is linked to the class, relative to a directory that contains all linked documents. For ShapeChange, that is directory 'linkedDocuments', which is a subdirectory of the directory that is identified via the ShapeChange input parameter 'tmpDirectory'. Example: linkedDoc_MyFeatureType.docx</documentation>
    </annotation>
   </element>
   <element minOccurs="0" name="supertypes">
    <annotation>
     <documentation>The direct supertypes of the class.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" name="SupertypeId" type="string">
       <annotation>
        <documentation>Id of a class (from the model) that is a direct supertype of this class.</documentation>
       </annotation>
      </element>
     </all>
    </complexType>
   </element>
   <element minOccurs="0" name="subtypes">
    <annotation>
     <documentation>The direct subtypes of the class.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" name="SubtypeId" type="string">
       <annotation>
        <documentation>Id of a class (from the model) that is a direct subtype of this class.</documentation>
       </annotation>
      </element>
     </all>
    </complexType>
   </element>
   <element minOccurs="0" name="constraints">
    <annotation>
     <documentation>The constraints defined on the class.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" ref="sc:Constraint"/>
     </all>
    </complexType>
   </element>
   <element minOccurs="0" name="diagrams">
    <annotation>
     <documentation>Information about the UML diagrams assigned to the class.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" ref="sc:ImageMetadata"/>
     </all>
    </complexType>
   </element>
   <element minOccurs="0" name="properties">
    <annotation>
     <documentation>The navigable, direct (i.e. not inherited) properties of the class. In other words, the combination of all attributes of the class and the navigable association roles. NOTE: Non-navigable association ends are specified by either sc:Association/sc:end1/sc:Property or sc:Association/sc:end2/sc:Property, at least one of which must be navigable.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" ref="sc:Property"/>
     </all>
    </complexType>
   </element>
  </all>
  <assert test="
    every $property in sc:properties/sc:Property
     satisfies (not(exists($property/sc:isNavigable)) or $property/sc:isNavigable/text() = ('1', 'true'))" saxon:message="All properties of a class shall be navigable."
   xerces:message="All properties of a class shall be navigable.">
   <annotation>
    <documentation>All properties of a class shall be navigable.</documentation>
   </annotation>
  </assert>
  <assert test="
    every $property in sc:properties/sc:Property
     satisfies not(exists($property/sc:inClassId))" saxon:message="sc:inClassId shall not be defined for properties encoded within a Class."
   xerces:message="sc:inClassId shall not be defined for properties encoded within a Class.">
   <annotation>
    <documentation>sc:inClassId shall not be defined for properties encoded within a Class.</documentation>
   </annotation>
  </assert>
 </complexType>
 <element name="Property" type="sc:PropertyType">
  <annotation>
   <documentation>Represents an attribute or an association role.</documentation>
  </annotation>
 </element>
 <complexType name="PropertyType">
  <all>
   <element minOccurs="0" name="name" type="string">
    <annotation>
     <documentation>The name of the property. May be omitted for non-navigable association roles.</documentation>
    </annotation>
   </element>
   <element name="id" type="string">
    <annotation>
     <documentation>The model internal ID of the property. Shall be unique amongst the IDs of all properties contained in the model.</documentation>
    </annotation>
   </element>
   <element minOccurs="0" ref="sc:stereotypes"/>
   <element ref="sc:descriptors" minOccurs="0"/>
   <element minOccurs="0" ref="sc:taggedValues"/>
   <element minOccurs="0" name="profiles">
    <annotation>
     <documentation>The profiles to which the property belongs.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" ref="sc:Profile" minOccurs="0"/>
     </all>
    </complexType>
   </element>
   <element name="cardinality" default="1" minOccurs="0">
    <annotation>
     <documentation>The multiplicity of the property as a string, in typical UML notation. Examples: 0..1, 1..4, 1..*, *.</documentation>
    </annotation>
    <simpleType>
     <restriction base="string">
      <pattern value="[1-9]\d*|\*|((0|[1-9]\d*)\.\.([1-9]\d*|\*))"/>
     </restriction>
    </simpleType>
   </element>
   <element minOccurs="0" name="isNavigable" type="boolean">
    <annotation>
     <documentation>Indicates whether the property is navigable. Typically, an attribute is always navigable, while an association role may not be navigable.

NOTE: In UML 1, property navigability indicated ownership. A navigable association role therefore was always owned by a class. In UML 2.4+, that convention is deprecated. In UML 2.4+, ownership and navigability are separate concepts, and navigability does not have much useful meaning anymore. For UML 1 and UML 2 based schemas, where ownership is not explicitly shown, ownership is derived from property navigability. Since the 'isNavigable' element is optional, without a default value, SCXML supports use cases where the schema explicitly models property ownership and navigability is not used at all. However, use cases where ownership is defined through navigability are also supported.</documentation>
    </annotation>
   </element>
   <element name="sequenceNumber">
    <annotation>
     <documentation>The sequence number defined for the property. Shall be unique amongst the properties of a class.</documentation>
    </annotation>
    <simpleType>
     <restriction base="string">
      <pattern value="(-)?\d+(\.(-)?\d+)*"/>
     </restriction>
    </simpleType>
   </element>
   <element minOccurs="0" name="typeId" type="string">
    <annotation>
     <documentation>Identifies the value type of the property by its id. Can be omitted in case that no value type is defined for the property. Codes and enums typically have no value type.</documentation>
    </annotation>
   </element>
   <element minOccurs="0" name="typeName" type="string">
    <annotation>
     <documentation>The name of the value type of the property. Can be omitted in case that no value type is defined for the property. Codes and enums typically have no value type.</documentation>
    </annotation>
   </element>
   <element default="false" minOccurs="0" name="isDerived" type="boolean">
    <annotation>
     <documentation>Defines if the property is a derived property.</documentation>
    </annotation>
   </element>
   <element default="false" minOccurs="0" name="isReadOnly" type="boolean">
    <annotation>
     <documentation/>
     <documentation>Defines if the property may not be written to after initialization.</documentation>
    </annotation>
   </element>
   <element default="true" minOccurs="0" name="isAttribute" type="boolean">
    <annotation>
     <documentation>Indicates whether this property is an attribute (and not an association role).</documentation>
    </annotation>
   </element>
   <element default="false" minOccurs="0" name="isOrdered" type="boolean">
    <annotation>
     <documentation>Defines if the property represents an ordered collection. Default is false (as specified in UML 2.4.1). NOTE: Has no semantic meaning if the property represents a code/enum.</documentation>
    </annotation>
   </element>
   <element default="true" minOccurs="0" name="isUnique" type="boolean">
    <annotation>
     <documentation>Defines if the property allows duplicates in the values (false) or if only unique values are allowed (true). Default is true (as specified in UML 2.4.1). NOTE: Has no semantic meaning if the property represents a code/enum.</documentation>
    </annotation>
   </element>
   <element default="false" minOccurs="0" name="isComposition" type="boolean">
    <annotation>
     <documentation>Defines if the property is a composition. Default is false. NOTE: Has no semantic meaning if the property represents a code/enum.</documentation>
    </annotation>
   </element>
   <element default="false" minOccurs="0" name="isAggregation" type="boolean">
    <annotation>
     <documentation>Defines if the property is an aggregation. Default is false. NOTE: Has no semantic meaning if the property represents a code/enum.</documentation>
    </annotation>
   </element>
   <element default="false" minOccurs="0" name="isOwned" type="boolean">
    <annotation>
     <documentation>True, if the property is an association end that is owned by the class, else false (then the property is either an attribute or owned by the association).</documentation>
    </annotation>
   </element>
   <element minOccurs="0" name="initialValue" type="string">
    <annotation>
     <documentation>The initial value defined for the property (only applicable to attributes).</documentation>
    </annotation>
   </element>
   <element default="inlineOrByReference" minOccurs="0" name="inlineOrByReference" type="string">
    <annotation>
     <documentation>Indicates whether the property value shall be encoded inline, by reference, or if it should be possible to encode a property value as a combination of both. Typically used for producing a GML application schema.</documentation>
    </annotation>
   </element>
   <element minOccurs="0" name="qualifiers">
    <annotation>
     <documentation>The qualifiers that apply to an association role.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" name="Qualifier">
       <annotation>
        <documentation>A qualifier, given as name and optional type.</documentation>
       </annotation>
       <complexType>
        <all>
         <element name="name" type="string">
          <annotation>
           <documentation>The qualifier name.</documentation>
          </annotation>
         </element>
         <element name="type" type="string" minOccurs="0">
          <annotation>
           <documentation>The qualifier type.</documentation>
          </annotation>
         </element>
        </all>
       </complexType>
      </element>
     </all>
    </complexType>
   </element>
   <element minOccurs="0" name="inClassId" type="string">
    <annotation>
     <documentation>The id of the class to which this property belongs. Only relevant for association roles encoded within an Association. All other properties are encoded as properties of the class to which they belong (thus the inClass relationship is implied).</documentation>
    </annotation>
   </element>
   <element minOccurs="0" name="associationId" type="string">
    <annotation>
     <documentation>The id of the association to which this property belongs, in case that the property is not an attribute.</documentation>
    </annotation>
   </element>
   <element minOccurs="0" name="constraints">
    <annotation>
     <documentation>The constraints defined on the property.</documentation>
    </annotation>
    <complexType>
     <all>
      <element maxOccurs="unbounded" ref="sc:Constraint"/>
     </all>
    </complexType>
   </element>
  </all>
  <assert test="not(exists(sc:initialValue)) or (not(exists(sc:isAttribute)) or sc:isAttribute/text() = ('1', 'true'))" saxon:message="An initial value can only be defined for an attribute."
   xerces:message="An initial value can only be defined for an attribute.">
   <annotation>
    <documentation>An initial value can only be defined for an attribute.</documentation>
   </annotation>
  </assert>
  <assert test="not(not(exists(sc:isAttribute)) or sc:isAttribute/text() = ('1', 'true')) or (not(exists(sc:isNavigable)) or sc:isNavigable/text() = ('1', 'true'))"
   saxon:message="If a property is an attribute, then it shall be navigable." xerces:message="If a property is an attribute, then it shall be navigable.">
   <annotation>
    <documentation>If a property is an attribute, then it shall be navigable.</documentation>
   </annotation>
  </assert>
  <assert test="not(exists(sc:qualifiers)) or (sc:isAttribute/text() = ('0', 'false'))" saxon:message="Qualifiers can only be defined for an association role."
   xerces:message="Qualifiers can only be defined for an association role.">
   <annotation>
    <documentation>Qualifiers can only be defined for an association role.</documentation>
   </annotation>
  </assert>
  <assert test="not(exists(sc:associationId)) or (sc:isAttribute/text() = ('0', 'false'))" saxon:message="sc:associationId shall only be used on association roles."
   xerces:message="sc:associationId shall only be used on association roles.">
   <annotation>
    <documentation>sc:associationId shall only be used on association roles.</documentation>
   </annotation>
  </assert>
 </complexType>
 <element name="Association" type="sc:AssociationType">
  <annotation>
   <documentation>An association contained in the model.</documentation>
  </annotation>
 </element>
 <complexType name="AssociationType">
  <all>
   <element minOccurs="0" name="name" type="string">
    <annotation>
     <documentation>The name of the association.</documentation>
    </annotation>
   </element>
   <element name="id" type="string">
    <annotation>
     <documentation>The model internal ID of the association. Shall be unique amongst the IDs of all associations contained in the model.</documentation>
    </annotation>
   </element>
   <element minOccurs="0" ref="sc:stereotypes"/>
   <element ref="sc:descriptors" minOccurs="0"/>
   <element minOccurs="0" ref="sc:taggedValues"/>
   <element minOccurs="0" name="assocClassId" type="string">
    <annotation>
     <documentation>Id of a class, if the class and this association represent an association class.</documentation>
    </annotation>
   </element>
   <element name="end1" type="sc:AssociationRoleType">
    <annotation>
     <documentation>One end of a binary association. No specific ordering is implied.</documentation>
    </annotation>
   </element>
   <element name="end2" type="sc:AssociationRoleType">
    <annotation>
     <documentation>The other end of a binary association. No specific ordering is implied.</documentation>
    </annotation>
   </element>
  </all>
  <assert test="(exists(sc:end1/@ref) and not(exists(sc:end1/sc:Property))) or (exists(sc:end1/sc:Property) and not(exists(sc:end1/@ref)))"
   saxon:message="For association end1, either @ref or sc:Property shall be present." xerces:message="For association end1, either @ref or sc:Property shall be present.">
   <annotation>
    <documentation>For association end1, either @ref or sc:Property shall be present.</documentation>
   </annotation>
  </assert>
  <assert test="(exists(sc:end2/@ref) and not(exists(sc:end2/sc:Property))) or (exists(sc:end2/sc:Property) and not(exists(sc:end2/@ref)))"
   saxon:message="For association end2, either @ref or sc:Property shall be present." xerces:message="For association end2, either @ref or sc:Property shall be present.">
   <annotation>
    <documentation>For association end2, either @ref or sc:Property shall be present.</documentation>
   </annotation>
  </assert>
  <assert test="not(exists(sc:end1/sc:Property)) or not(sc:end1/sc:Property/sc:isNavigable/text() = ('1', 'true'))"
   saxon:message="An sc:Property element that is directly encoded within an association - here: sc:end1/sc:Property - shall not be navigable."
   xerces:message="An sc:Property element that is directly encoded within an association - here: sc:end1/sc:Property - shall not be navigable.">
   <annotation>
    <documentation>An sc:Property element that is directly encoded within an association - here: sc:end1/sc:Property - shall not be navigable.</documentation>
   </annotation>
  </assert>
  <assert test="not(exists(sc:end2/sc:Property)) or not(sc:end2/sc:Property/sc:isNavigable/text() = ('1', 'true'))"
   saxon:message="An sc:Property element that is directly encoded within an association - here: sc:end2/sc:Property - shall not be navigable."
   xerces:message="An sc:Property element that is directly encoded within an association - here: sc:end2/sc:Property - shall not be navigable.">
   <annotation>
    <documentation>An sc:Property element that is directly encoded within an association - here: sc:end2/sc:Property - shall not be navigable.</documentation>
   </annotation>
  </assert>
  <assert test="not(exists(sc:end1/sc:Property)) or exists(sc:end1/sc:Property/sc:inClassId)"
   saxon:message="sc:inClassId shall be defined for association roles - here: sc:end1/sc:Property - encoded within an Association."
   xerces:message="sc:inClassId shall be defined for association roles - here: sc:end1/sc:Property - encoded within an Association.">
   <annotation>
    <documentation>sc:inClassId shall be defined for association roles - here: sc:end1/sc:Property - encoded within an Association.</documentation>
   </annotation>
  </assert>
  <assert test="not(exists(sc:end2/sc:Property)) or exists(sc:end2/sc:Property/sc:inClassId)"
   saxon:message="sc:inClassId shall be defined for association roles - here: sc:end2/sc:Property - encoded within an Association."
   xerces:message="sc:inClassId shall be defined for association roles - here: sc:end2/sc:Property - encoded within an Association.">
   <annotation>
    <documentation>sc:inClassId shall be defined for association roles - here: sc:end2/sc:Property - encoded within an Association.</documentation>
   </annotation>
  </assert>
 </complexType>
 <complexType name="AssociationRoleType">
  <annotation>
   <documentation>Identifies the association role, either by reference (for a navigable role) or by directly encoding it (for a non-navigable role).</documentation>
  </annotation>
  <all>
   <element minOccurs="0" ref="sc:Property"/>
  </all>
  <attribute name="ref" type="string">
   <annotation>
    <documentation>The id of the association role, in case that it is defined within the properties of a class.</documentation>
   </annotation>
  </attribute>
 </complexType>
 <element name="ImageMetadata" type="sc:ImageMetadataType">
  <annotation>
   <documentation>Information about a UML diagram associated with the model element.</documentation>
  </annotation>
 </element>
 <complexType name="ImageMetadataType">
  <all>
   <element name="id" type="ID">
    <annotation>
     <documentation>Unique ID for the image metadata.</documentation>
    </annotation>
   </element>
   <element name="name" type="string">
    <annotation>
     <documentation>The name of the UML diagram.</documentation>
    </annotation>
   </element>
   <element minOccurs="0" name="documentation" type="string">
    <annotation>
     <documentation>The documentation of the UML diagram.</documentation>
    </annotation>
   </element>
   <element name="relPathToFile" type="string">
    <annotation>
     <documentation>Path to the image, relative to a directory that contains the images of all UML diagrams. For ShapeChange, that is directory 'images', which is a subdirectory of the directory that is identified via the ShapeChange input parameter 'tmpDirectory'. Example: package_1/package_2/Model element X.jpg</documentation>
    </annotation>
   </element>
   <element name="width" type="positiveInteger">
    <annotation>
     <documentation>Image width (in pixels).</documentation>
    </annotation>
   </element>
   <element name="height" type="positiveInteger">
    <annotation>
     <documentation>Image height (in pixels).</documentation>
    </annotation>
   </element>
  </all>
 </complexType>
 <element abstract="true" name="Constraint" type="sc:ConstraintType">
  <annotation>
   <documentation/>
  </annotation>
 </element>
 <complexType name="ConstraintType">
  <all>
   <element name="name" type="string">
    <annotation>
     <documentation>The name of the constraint.</documentation>
    </annotation>
   </element>
   <element minOccurs="0" name="status" type="string">
    <annotation>
     <documentation>Status of the constraint. NOTE: The 'status' of a constraint is meant to be some string in conspiracy between the model source and some code generator. This may be changed to an enum later, when some practice is achieved. The 'status' is supposed to express some state of refinedness, validity or purpose of the constraint.
</documentation>
    </annotation>
   </element>
   <element name="text" type="string" minOccurs="0">
    <annotation>
     <documentation>The textual representation of the constraint.</documentation>
    </annotation>
   </element>
  </all>
 </complexType>
 <element name="OclConstraint" substitutionGroup="sc:Constraint" type="sc:OclConstraintType">
  <annotation>
   <documentation>An OCL constraint.</documentation>
  </annotation>
 </element>
 <complexType name="OclConstraintType">
  <complexContent>
   <extension base="sc:ConstraintType">
    <all>
     <element minOccurs="0" name="description" type="string" maxOccurs="unbounded">
      <annotation>
       <documentation>Informative documentation of the constraint.</documentation>
      </annotation>
     </element>
    </all>
   </extension>
  </complexContent>
 </complexType>
 <element name="FolConstraint" substitutionGroup="sc:Constraint" type="sc:FolConstraintType">
  <annotation>
   <documentation>A First Order Logic constraint.</documentation>
  </annotation>
 </element>
 <complexType name="FolConstraintType">
  <complexContent>
   <extension base="sc:ConstraintType">
    <all>
     <element minOccurs="0" name="sourceType" type="string">
      <annotation>
       <documentation>The type of the source from which the constraint was created (e.g. 'SBVR').</documentation>
      </annotation>
     </element>
     <element minOccurs="0" name="description" type="string" maxOccurs="unbounded">
      <annotation>
       <documentation>Informative documentation of the constraint.</documentation>
      </annotation>
     </element>
    </all>
   </extension>
  </complexContent>
 </complexType>
 <element name="TextConstraint" substitutionGroup="sc:Constraint" type="sc:TextConstraintType">
  <annotation>
   <documentation>A simple, human-readable constraint.</documentation>
  </annotation>
 </element>
 <complexType name="TextConstraintType">
  <complexContent>
   <extension base="sc:ConstraintType">
    <all>
     <element minOccurs="0" name="type" type="string">
      <annotation>
       <documentation>The 'type' of the constraint. Principally, types are chosen in conspiracy between the model source and some target code generator to describe the nature of the constraint. NOTE: The value of type must not be equal to "OCL".</documentation>
      </annotation>
     </element>
    </all>
   </extension>
  </complexContent>
 </complexType>
 <element name="descriptors">
  <annotation>
   <documentation>Contains specific kinds of descriptive information for the model element.</documentation>
  </annotation>
  <complexType>
   <all>
    <element minOccurs="0" name="alias" type="sc:DescriptorType">
     <annotation>
      <documentation>An alternative, human-readable name for the model element.</documentation>
     </annotation>
    </element>
    <element minOccurs="0" name="primaryCode" type="sc:DescriptorType">
     <annotation>
      <documentation>The primary code for the model element.</documentation>
     </annotation>
    </element>
    <element minOccurs="0" name="globalIdentifier" type="sc:DescriptorType">
     <annotation>
      <documentation>The globally unique identifier of the model element; that is, unique across models.</documentation>
     </annotation>
    </element>
    <element minOccurs="0" name="documentation" type="sc:DescriptorType">
     <annotation>
      <documentation>A documentation field per model element that includes one or more descriptors, typically the notes field of the UML tool.</documentation>
     </annotation>
    </element>
    <element minOccurs="0" name="definition" type="sc:DescriptorType">
     <annotation>
      <documentation>The normative specification of the model element.</documentation>
     </annotation>
    </element>
    <element minOccurs="0" name="description" type="sc:DescriptorType">
     <annotation>
      <documentation>Additional informative information about the model element.</documentation>
     </annotation>
    </element>
    <element minOccurs="0" name="legalBasis" type="sc:DescriptorType">
     <annotation>
      <documentation>The legal basis for the model element.</documentation>
     </annotation>
    </element>
    <element minOccurs="0" name="language" type="sc:DescriptorType">
     <annotation>
      <documentation>The default language, if no language information is provided in definitions, descriptions, examples, etc.</documentation>
     </annotation>
    </element>
    <element minOccurs="0" name="example" type="sc:DescriptorType">
     <annotation>
      <documentation>An example illustrating the model element.</documentation>
     </annotation>
    </element>
    <element minOccurs="0" name="dataCaptureStatement" type="sc:DescriptorType">
     <annotation>
      <documentation>A statement describing how to capture instances of this model element from the real-world.</documentation>
     </annotation>
    </element>
   </all>
  </complexType>
 </element>
 <element name="stereotypes">
  <annotation>
   <documentation>The stereotypes assigned to the model element.</documentation>
  </annotation>
  <complexType>
   <all>
    <element maxOccurs="unbounded" name="Stereotype" type="string">
     <annotation>
      <documentation>The name of a stereotype.</documentation>
     </annotation>
    </element>
   </all>
   <assert test="
     count(distinct-values(for $st in sc:Stereotype
     return
      lower-case($st))) eq count(sc:Stereotype)" saxon:message="Within a collection of stereotypes, all stereotype names shall be unique (ignoring case)."
    xerces:message="Within a collection of stereotypes, all stereotype names shall be unique (ignoring case).">
    <annotation>
     <documentation>Within a collection of stereotypes, all stereotype names shall be unique (ignoring case).</documentation>
    </annotation>
   </assert>
  </complexType>
 </element>
 <element name="taggedValues">
  <annotation>
   <documentation>The tagged values of the model element.</documentation>
  </annotation>
  <complexType>
   <all>
    <element maxOccurs="unbounded" name="TaggedValue">
     <annotation>
      <documentation>A tagged value is defined by the tag name and, optionally, one or more string values.</documentation>
     </annotation>
     <complexType>
      <all>
       <element name="name" type="string">
        <annotation>
         <documentation>The tag name.</documentation>
        </annotation>
       </element>
       <element minOccurs="0" name="values">
        <annotation>
         <documentation>The tag values.</documentation>
        </annotation>
        <complexType>
         <all>
          <element maxOccurs="unbounded" name="Value" type="string">
           <annotation>
            <documentation>A tag value is given as a simple string.</documentation>
           </annotation>
          </element>
         </all>
        </complexType>
       </element>
      </all>
     </complexType>
    </element>
   </all>
  </complexType>
  <unique name="uniqueTagNames">
   <annotation>
    <documentation>Within a collection of tagged values, each tagged value shall have a unique name.</documentation>
   </annotation>
   <selector xpath="sc:TaggedValue"/>
   <field xpath="sc:name"/>
  </unique>
 </element>
 <element name="ModelDiff" type="sc:ModelDiffType"/>
 <complexType name="ModelDiffType">
  <all>
   <element name="sourceModel" minOccurs="0">
    <complexType>
     <all>
      <element ref="sc:Model"/>
     </all>
    </complexType>
   </element>
   <element name="targetModel" minOccurs="0">
    <complexType>
     <all>
      <element ref="sc:Model"/>
     </all>
    </complexType>
   </element>
   <element name="diffs">
    <complexType>
     <all maxOccurs="1" minOccurs="1">
      <element maxOccurs="unbounded" minOccurs="0" ref="sc:DiffElement"/>
     </all>
    </complexType>
   </element>
  </all>
  <attribute name="diffProducer" type="string">
   <annotation>
    <documentation>Identifies the software that produced the model diff.</documentation>
   </annotation>
  </attribute>
  <attribute name="diffProducerVersion" type="string">
   <annotation>
    <documentation>The version of the software that produced the model diff.</documentation>
   </annotation>
  </attribute>
 </complexType>
 <element name="DiffElement">
  <complexType>
   <complexContent>
    <extension base="sc:DiffElementType">
     <assert test="(count(sc:sourceId) + count(sc:sourceSchemaPath) + count(sc:targetId) + count(sc:targetSchemaPath)) > 0"
      saxon:message="At least one of sourceId, sourceSchemaPath, targetId, or targetSchemaPath must exist.">
      <annotation>
       <documentation>At least one of sourceId, sourceSchemaPath, targetId, or targetSchemaPath must exist.</documentation>
      </annotation>
     </assert>
    </extension>
   </complexContent>
  </complexType>
 </element>
 <complexType name="DiffElementType">
  <all>
   <element name="sourceId" type="string" minOccurs="0"/>
   <element name="sourceSchemaPath" type="string" minOccurs="0"/>
   <element name="targetId" type="string" minOccurs="0"/>
   <element name="targetSchemaPath" type="string" minOccurs="0"/>
   <element name="change" type="sc:DiffOperationType"/>
   <element name="elementChangeType" type="sc:DiffElementChangeType"/>
   <element minOccurs="0" name="subElementId" type="string"/>
   <element minOccurs="0" name="subElementSchemaPath" type="string"/>
   <element minOccurs="0" name="tag" type="string"/>
   <element minOccurs="0" name="from">
    <complexType>
     <all>
      <element maxOccurs="unbounded" minOccurs="1" name="Value" type="string"/>
     </all>
    </complexType>
   </element>
   <element minOccurs="0" name="to">
    <complexType>
     <all>
      <element maxOccurs="unbounded" minOccurs="1" name="Value" type="string"/>
     </all>
    </complexType>
   </element>
  </all>
 </complexType>
 <simpleType name="DiffOperationType">
  <restriction base="string">
   <enumeration value="DELETE"/>
   <enumeration value="INSERT"/>
   <enumeration value="CHANGE"/>
  </restriction>
 </simpleType>
 <simpleType name="DiffElementChangeType">
  <restriction base="string">
   <enumeration value="SELF"/>
   <enumeration value="NAME"/>
   <enumeration value="DOCUMENTATION"/>
   <enumeration value="MULTIPLICITY"/>
   <enumeration value="VALUETYPE"/>
   <enumeration value="INITIALVALUE"/>
   <enumeration value="CLASS"/>
   <enumeration value="SUPERTYPE"/>
   <enumeration value="SUBPACKAGE"/>
   <enumeration value="PROPERTY"/>
   <enumeration value="ENUM"/>
   <enumeration value="STEREOTYPE"/>
   <enumeration value="TAG"/>
   <enumeration value="ALIAS"/>
   <enumeration value="DEFINITION"/>
   <enumeration value="DESCRIPTION"/>
   <enumeration value="PRIMARYCODE"/>
   <enumeration value="GLOBALIDENTIFIER"/>
   <enumeration value="LEGALBASIS"/>
   <enumeration value="AAAMODELLART"/>
   <enumeration value="AAAGRUNDDATENBESTAND"/>
   <enumeration value="AAALANDNUTZUNG"/>
   <enumeration value="AAAGUELTIGBIS"/>
   <enumeration value="AAARETIRED"/>
  </restriction>
 </simpleType>
</schema>
